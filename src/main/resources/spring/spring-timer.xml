<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:tx="http://www.springframework.org/schema/tx"    
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/task 
        http://www.springframework.org/schema/task/spring-task-3.0.xsd
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd ">
	<!-- 第二步：spring配置文件中配置作业类JobDetailBean 
	<bean name="job1" class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="jobClass" value="com.gy.Job1" />
		<property name="jobDataAsMap">
			<map>
				<entry key="timeout" value="0" />
			</map>
		</property>
	</bean>
	
	第三步：配置作业调度的触发方式（触发器） 第一种SimpleTriggerBean，只支持按照一定频度调用任务，如每隔30分钟运行一次。 
		配置方式如下：
		
	<bean id="simpleTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
		<property name="jobDetail" ref="job1" />
		<property name="startDelay" value="0" />调度工厂实例化后，经过0秒开始执行调度
		<property name="repeatInterval" value="2000" />每2秒调度一次
	</bean>
	
	第二种CronTriggerBean，支持到指定时间运行一次，如每天12:00运行一次等。 配置方式如下：
	<bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="job1" />
		每天12:00运行一次
		<property name="cronExpression" value="0 16 13 ? * *" />
	</bean>
	
	第四步：配置调度工厂
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="cronTrigger" />
			</list>
		</property>
	</bean>  -->
	<!-- 配置数据库相关的参数 -->
	<context:property-placeholder location="classpath:jdbc.properties"/>
	<!-- spring注解 -->
	<context:annotation-config></context:annotation-config>
	<!-- 数据库的连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${url}" />
        <property name="username" value="${username}" />
        <property name="password" value="${password}" />

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1" />
        <property name="minIdle" value="1" />
        <property name="maxActive" value="20" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />
    </bean> 
	
	<!-- 配置sqlsessionfactorty -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 注入数据库连接池 -->
		<property name="dataSource" ref="dataSource"></property>
		
		<!-- 配置mybaits配置文件 -->
		<property name="configLocation" value="classpath:main/resources/mybatis-config.xml"></property>
		
		<!-- 扫描entity包  使用别名，只写类名不用再全包名-->
		<property name="typeAliasesPackage" value="main.java.com.seckill.entity"></property>
		
		<!-- 扫描sql配置文件 mapper需要的xml文件-->
		<property name="mapperLocations" value="classpath:main/resources/mapper/*.xml"></property>
		
	</bean>
	
	<!-- 配置扫描dao接口的包 动态实现dao接口  注入到spring容器中-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 注入sqlsessionfactory -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
		<!-- 给出扫描的dao包 --> 
		<property name="basePackage" value="main.java.com.seckill.dao"></property>
	</bean>
	
	<!-- redis配置 -->
	<!-- <bean class="main.java.com.seckill.dao.cache.RedisDao">
		 <constructor-arg name="ip" value="localhost" />
         <constructor-arg name="port" value="6379" />
	</bean> -->
	<context:component-scan base-package="main.java.com.seckill.service"/>
	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<tx:annotation-driven transaction-manager="transactionManager"/>
    <!-- spring扫描注解的配置   -->
	<context:component-scan base-package="main.java.com.seckill.timer" />  
	<!--开启这个配置，spring才能识别@Scheduled注解   -->
	<task:annotation-driven scheduler="qbScheduler"
		mode="proxy" />
	<task:scheduler id="qbScheduler" pool-size="10" />
	<!-- 1．秒（0–59）
	2．分钟（0–59）
	3．小时（0–23）
	4．月份中的日期（1–31）
	5．月份（1–12或JAN–DEC）
	6．星期中的日期（1–7或SUN–SAT）
	7．年份（1970–2099）
	秒 0-59 , - * /
	分 0-59 , - * /
	小时 0-23 , - * /
	日期 1-31 , - * ? / L W C
	月份 1-12 或者 JAN-DEC , - * /
	星期 1-7 或者 SUN-SAT , - * ? / L C #
	年（可选）留空, 1970-2099 , - * /
	表达式意义
	"0 0 12 * * ?" 每天中午12点触发  -->
</beans>




